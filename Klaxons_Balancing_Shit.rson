{
  "FileID":  573785173,
  "FileVersion":  8,
  "ViewPos.x":  -688,
  "ViewPos.y":  -643,
  "ScriptName":  "Mod_RefRefRadarBuffForTrancs",
  "ScriptFileOut":  "M:\\ReflectionFixes\\Mods\\Reflection\\RefRadarBuffForTrancs\\DATA\\Script\\Mod_RefRefRadarBuffForTrancs.scr",
  "ScriptTextOut":  "M:\\ReflectionFixes\\Mods\\Reflection\\RefRadarBuffForTrancs\\DATA\\Script\\Mod_RefRefRadarBuffForTrancs.txt",
  "Visual.Objects":  
  [
    {
      "Dialogs":      
      [
        {
          "Type":  "TDialog",
          "Name":  "DialogNew",
          "Pos.x":  140,
          "Pos.y":  -150,
          "Parent":  -1,
          "#":  9        
        }      
      ],
      "Groups":      
      [
        {
          "Type":  "TGroup",
          "Name":  "GroupNew",
          "Pos.x":  -100,
          "Pos.y":  0,
          "Parent":  -1,
          "#":  4,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  1,
          "CntShipMax":  1,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  true,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        }      
      ],
      "Operations":      
      [
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -50,
          "Pos.y":  -90,
          "Parent":  -1,
          "#":  5,
          "Code.Type":  "Global",
          "Code":          
          [
              "GRun();"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -10,
          "Pos.y":  -90,
          "Parent":  -1,
          "#":  6,
          "Code.Type":  "DialogBegin",
          "Code":          
          [
              "//"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -50,
          "Pos.y":  -130,
          "Parent":  -1,
          "#":  7,
          "Code.Type":  "Turn",
          "Code":          
          [
              ""          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -10,
          "Pos.y":  -130,
          "Parent":  -1,
          "#":  8,
          "Code.Type":  "Init",
          "Code":          
          [
              "function RaceSetDefine(race_str, split_type)",
              "{",
              "    //Определяем сет рас",
              "    int race_set = 0;",
              "",
              "    if(race_str == '' || race_str == 'Any')",
              "    {",
              "        if(split_type != 'Acryn') race_set = 1951; //По умолчанию все расы, кроме неизвестной (1 + 2 + 4 + 8 + 16 + 128 + 256 + 512 + 1024)",
              "        else race_set = 159; //По умолчанию все расы, кроме неизвестной и доминаторов (1 + 2 + 4 + 8 + 16 + 128)",
              "    }",
              "    else",
              "    {",
              "        int dom_race_restrict = 0;",
              "        //Для акринов по умолчанию не добавляем в сет доминаторские расы",
              "        if(split_type == 'Acryn') dom_race_restrict = 1;",
              "        int cycle_count = 0;",
              "",
              "        str par_str = 'begin';",
              "        while(par_str != '')",
              "        {",
              "            par_str = GetParFromString(race_str, ',', cycle_count, 1);",
              "",
              "            if(par_str == 'Maloc')",
              "            {",
              "                if(!(race_set & 1)) race_set = race_set + 1;",
              "            }",
              "            else if(par_str == 'Peleng')",
              "            {",
              "                if(!(race_set & 2)) race_set = race_set + 2;",
              "            }",
              "            else if(par_str == 'People')",
              "            {",
              "                if(!(race_set & 4)) race_set = race_set + 4;",
              "            }",
              "            else if(par_str == 'Fei')",
              "            {",
              "                if(!(race_set & 8)) race_set = race_set + 8;",
              "            }",
              "            else if(par_str == 'Gaal')",
              "            {",
              "                if(!(race_set & 16)) race_set = race_set + 16;",
              "            }",
              "            else if(par_str == 'None')",
              "            {",
              "                if(!(race_set & 64)) race_set = race_set + 64;",
              "            }",
              "            else if(par_str == 'PirateClan')",
              "            {",
              "                if(!(race_set & 128)) race_set = race_set + 128;",
              "            }",
              "    // Не используется в оригинальной игре! /////////////",
              "            else if(par_str == 'Kling')",
              "            {",
              "                if(!(race_set & 256)) race_set = race_set + 256;",
              "                if(!(race_set & 512)) race_set = race_set + 512;",
              "                if(!(race_set & 1024)) race_set = race_set + 1024;",
              "                dom_race_restrict = 1;",
              "            }",
              "    ////////////////////////////////////////////////////",
              "            else if(par_str == 'Blazer')",
              "            {",
              "                if(!(race_set & 256))race_set = race_set + 256;",
              "                dom_race_restrict = 1;",
              "            }",
              "            else if(par_str == 'Keller')",
              "            {",
              "                if(!(race_set & 512))race_set = race_set + 512;",
              "                dom_race_restrict = 1;",
              "            }",
              "            else if(par_str == 'Terron')",
              "            {",
              "                if(!(race_set & 1024))race_set = race_set + 1024;",
              "                dom_race_restrict = 1;",
              "            }",
              "            else if(par_str == 'NonKling')",
              "            {",
              "                dom_race_restrict = 2;",
              "            }",
              "",
              "            cycle_count = cycle_count + 1;",
              "        }",
              "",
              "        if(!dom_race_restrict)race_set = race_set + 1792; //По умолчанию добавляем в сет все доминаторские серии",
              "        //Удаляем все доминаторские серии, если был установлен параметр NonKling",
              "        else if(dom_race_restrict == 2)",
              "        {",
              "            if((race_set & 256))race_set = race_set - 256;",
              "            if((race_set & 512))race_set = race_set - 512;",
              "            if((race_set & 1024))race_set = race_set - 1024;",
              "        }",
              "    }",
              "",
              "    result = race_set;",
              "}",
              "",
              "//SetBaseType('' + t_Engine, '', 8, 1);",
              "function SetBaseType(str type, str custom_type, GTL, param)",
              "{",
              "    str dam_type = 'NotWeapon';",
              "    str param_type;",
              "",
              "    int shots_count = 0;",
              "    int attacks_count = 0;",
              "    int shot_type_check = 0;",
              "",
              "    if(type==t_Hull)",
              "    {",
              "        type='Hull';",
              "",
              "        //Броня",
              "        if(param == 1)",
              "        {",
              "            tstr=CT('Items.Hull.mAlloy');",
              "            param=4 + GetParFromString(tstr, ',', GTL-1, 1);",
              "",
              "            param_type = 'Hull armor';",
              "        }",
              "        else if(param == 2)",
              "        {",
              "            param=0;",
              "            param_type = 'Hull mass';",
              "        }",
              "    }",
              "    else if(type>=t_Weapon1 && type<=t_CustomWeapon)",
              "    {",
              "        if(type <= t_Weapon9)custom_type='W0'+(0+type-(t_Weapon1-1));",
              "        else if(type != t_CustomWeapon)custom_type='W'+(0+type-(t_Weapon1-1));",
              "",
              "        if(type != t_CustomWeapon)tint = GetCustomWeaponData(0+type, 'DamageType');",
              "        else tint = GetCustomWeaponData(custom_type, 'DamageType');",
              "",
              "        if((tint & 1))dam_type='WEnergy';",
              "        else if((tint & 2))dam_type='WSplinter';",
              "        else if((tint & 3))dam_type='WMissile';",
              "",
              "        //Максимальный урон (на минимальный бонусы не применяются)",
              "        if(param == 1)",
              "        {",
              "            if(type != t_CustomWeapon)",
              "            {",
              "                tint = CT('Items.Weapon.Stats.'+(0+type-(t_Weapon1-1))+'.MaxDamage');",
              "                param = round((0.0 + GetParFromString(CT('Items.Weapon.Stats.'+(0+type-(t_Weapon1-1))+'.mWeaponDamage'), ',', GTL-1, 1)) * tint);",
              "            }",
              "            else",
              "            {",
              "                tint = CT('Items.Weapon.Stats.'+custom_type+'.MaxDamage');",
              "                param = round((0.0 + GetParFromString(CT('Items.Weapon.Stats.'+custom_type+'.mWeaponDamage'), ',', GTL-1, 1)) * tint);",
              "            }",
              "            param = round(0.12 * param + 0.40 * tint + 3 + param);",
              "",
              "            param_type = 'Max damage';",
              "        }",
              "        //Дальность",
              "        else if(param == 2)",
              "        {",
              "            if(type != t_CustomWeapon)param = GetCustomWeaponData(0+type, 'AverageRadius');",
              "            else param = GetCustomWeaponData(custom_type, 'AverageRadius');",
              "            tint = param;",
              "",
              "            if(GTL == 1)param = round(0.90 * param);",
              "            else if(GTL == 2)param = round(0.95 * param);",
              "            else if(GTL == 3)param = round(0.95 * param);",
              "            else if(GTL == 4)param = round(1.00 * param);",
              "            else if(GTL == 5)param = round(1.00 * param);",
              "            else if(GTL == 6)param = round(1.05 * param);",
              "            else if(GTL == 7)param = round(1.05 * param);",
              "            else if(GTL == 8)param = round(1.10 * param);",
              "",
              "            param = round(0.07 * param + 0.11 * tint + param);",
              "",
              "            param_type = 'Weapon range';",
              "        }",
              "        //Максимальный урон, наносимый за один ход или DPD",
              "        else if(param == 3)",
              "        {",
              "            //Вычисляем максимальный урон",
              "            if(type != t_CustomWeapon)",
              "            {",
              "                tint = CT('Items.Weapon.Stats.' + (0 + type - (t_Weapon1 - 1)) + '.MaxDamage');",
              "                param = round((0.0 + GetParFromString(CT('Items.Weapon.Stats.' + (0 + type - (t_Weapon1 - 1)) + '.mWeaponDamage'), ',', GTL - 1, 1)) * tint);",
              "            }",
              "            else",
              "            {",
              "                tint = CT('Items.Weapon.Stats.' + custom_type + '.MaxDamage');",
              "                param = round((0.0 + GetParFromString(CT('Items.Weapon.Stats.' + custom_type + '.mWeaponDamage'), ',', GTL - 1, 1)) * tint);",
              "            }",
              "            param = round(0.12 * param + 0.40 * tint + 3 + param);",
              "",
              "            //Учитываем число залпов в выстреле",
              "            if(type != t_CustomWeapon)shots_count = GetCustomWeaponData(0 + type, 'ShotCount');",
              "            else shots_count = GetCustomWeaponData(custom_type, 'ShotCount');",
              "",
              "            //Учитываем число выстрелов в ходу",
              "            if(type != t_CustomWeapon)attacks_count = GetCustomWeaponData(0 + type, 'AttackCount');",
              "            else attacks_count = GetCustomWeaponData(custom_type, 'AttackCount');",
              "",
              "            //Проверяем тип выстрела",
              "            if(type != t_CustomWeapon)tstr = TrimNumbers(GetCustomWeaponData(0 + type, 'ShotType'));",
              "            else tstr = TrimNumbers(GetCustomWeaponData(custom_type, 'ShotType'));",
              "",
              "            if(tstr == 'Rocket' || tstr == 'Missile')shot_type_check = 1;",
              "",
              "            param_type = 'Max damage per turn';",
              "        }",
              "",
              "        type = custom_type;",
              "    }",
              "    else if(type == t_Engine)",
              "    {",
              "        type = 'Engine';",
              "",
              "        //Скорость",
              "        if(param == 1)",
              "        {",
              "            tstr=CT('Items.Engine.mSpeed');",
              "            param=round(0.07 * GetParFromString(tstr, ',', GTL-1, 1) + 80 + GetParFromString(tstr, ',', GTL-1, 1));",
              "",
              "            param_type = 'Engine speed';",
              "        }",
              "        //Прыжок",
              "        else if(param == 2)",
              "        {",
              "            tstr=CT('Items.Engine.mJump');",
              "            param=12 + GetParFromString(tstr, ',', GTL-1, 1);",
              "",
              "            param_type = 'Jump range';",
              "        }",
              "    }",
              "    else if(type==t_FuelTanks)",
              "    {",
              "        type='FuelTank';",
              "",
              "        //Ёмкость",
              "        if(param == 1)",
              "        {",
              "            tstr=CT('Items.FuelTanks.mCapacity');",
              "            param=round(0.20 * GetParFromString(tstr, ',', GTL-1, 1) + 5 + GetParFromString(tstr, ',', GTL-1, 1));",
              "",
              "            param_type = 'Fuel capacity';",
              "        }",
              "    }",
              "    else if(type==t_Radar)",
              "    {",
              "        type='Radar';",
              "",
              "        //Дальность",
              "        if(param == 1)",
              "        {",
              "            tstr=CT('Items.Radar.mRadius');",
              "            param=round(0.10 * GetParFromString(tstr, ',', GTL-1, 1) + 500 + GetParFromString(tstr, ',', GTL-1, 1));",
              "",
              "            param_type = 'Radar range';",
              "        }",
              "    }",
              "    else if(type==t_Scaner)",
              "    {",
              "        type='Scaner';",
              "",
              "        //Дальность",
              "        if(param == 1)",
              "        {",
              "            tstr=CT('Items.DefGenerator.mDef');",
              "            param=round(0.10 * (1 + GetParFromString(tstr, ',', GTL-1, 1)) + 7 + (1 + GetParFromString(tstr, ',', GTL-1, 1)));",
              "",
              "            param_type = 'Scanner power';",
              "        }",
              "    }",
              "    else if(type==t_RepairRobot)",
              "    {",
              "        type='Droid';",
              "",
              "        //Эффективность",
              "        if(param == 1)",
              "        {",
              "            tstr=CT('Items.RepairRobot.mRepair');",
              "            param=round(0.12 * GetParFromString(tstr, ',', GTL-1, 1) + 10 + GetParFromString(tstr, ',', GTL-1, 1));",
              "",
              "            param_type = 'Droid efficiency';",
              "        }",
              "    }",
              "    else if(type==t_CargoHook)",
              "    {",
              "        type='Hook';",
              "",
              "        //Размер объектов",
              "        if(param == 1)",
              "        {",
              "            tstr=CT('Items.CargoHook.mMass');",
              "            param=round(0.12 * GetParFromString(tstr, ',', GTL-1, 1) + 20 + GetParFromString(tstr, ',', GTL-1, 1));",
              "",
              "            param_type = 'Hook max object size';",
              "        }",
              "        //Дальность",
              "        else if(param == 2)",
              "        {",
              "            tstr=CT('Items.CargoHook.mRadius');",
              "            param=25 + GetParFromString(tstr, ',', GTL-1, 1);",
              "",
              "            param_type = 'Hook range';",
              "        }",
              "        //Макс. скорость (вблизи)",
              "        else if(param == 3)",
              "        {",
              "            param=CT('Items.CargoHook.mSpeedClose');",
              "",
              "            param_type = 'Hook close (max) speed';",
              "        }",
              "        //Мин. скорость (на удалении)",
              "        else if(param == 4)",
              "        {",
              "            param=CT('Items.CargoHook.mSpeedFar');",
              "",
              "            param_type = 'Hook far (min) speed';",
              "        }",
              "    }",
              "    else if(type==t_DefGenerator)",
              "    {",
              "        type='DefGenerator';",
              "",
              "        //Процент защиты",
              "        if(param == 1)",
              "        {",
              "            tstr=CT('Items.DefGenerator.mDef');",
              "            param=100.0 * GetParFromString(tstr, ',', GTL-1, 1) + 5;",
              "",
              "            param_type = 'Defence percent';",
              "        }",
              "    }",
              "",
              "    result='' + type + ',' + dam_type + ',' + param + ',' + param_type + ',' + shots_count + ',' + attacks_count + ',' + shot_type_check;",
              "}",
              "",
              "//Функция для проверки максимального/минимального значения бонусов/штрафов (выводит собранную информацию в игровой лог)",
              "//Для применения, вставьте в исполняемую строку следующую команду (переносы строк убирать не обязательно):",
              "// str itemType = t_DefGenerator;",
              "// str customWeaponType = '';",
              "// int parameterType = 1;",
              "// int parameterMaxValue = 50;",
              "// int parameterMinValue = 0;",
              "// int bonusType = bonDef;",
              "// int galaxyTechLevel = 8;",
              "// int isInstallMMs = 4;",
              "// int isInstallUniqueMMs = 1;",
              "// int isInstallAcrynator = 1;",
              "// int isInstallArtefacts = 1;",
              "// int isAppliedStimulantsAndDiseases = 1;",
              "// str skipAcrynsList = '*ExpTC_Lifeboat*ExpAcryn_DomAcryn*';",
              "// CheckParamRangeSingle(itemType, customWeaponType, galaxyTechLevel, parameterType, bonusType, parameterMaxValue, parameterMinValue, isInstallMMs, isInstallUniqueMMs, isInstallAcrynator, isInstallArtefacts, isAppliedStimulantsAndDiseases, skipAcrynsList);",
              "function CheckParamRangeSingle(str type, str custom_type, GTL, param, bonus, param_max_value, param_min_value, InstallMM, InstallUniqueMM, InstallAcrynator, InstallArtefacts, InstallStimulants, skipAcrynsList)",
              "{",
              "    //Определяем базовый параметр оборудки с учётом максимального улучшения на НБ для указанного ГТУ",
              "    type=SetBaseType(type, custom_type, GTL, param);",
              "",
              "    str dam_type = GetParFromString(type, ',', 1, 1);",
              "    param = GetParFromString(type, ',', 2, 1);",
              "    str param_type = GetParFromString(type, ',', 3, 0);",
              "    int shots_count = GetParFromString(type, ',', 4, 0);",
              "    int attacks_count = GetParFromString(type, ',', 5, 0);",
              "    int shot_type_check = GetParFromString(type, ',', 6, 0);",
              "    type = GetParFromString(type, ',', 0, 1);",
              "",
              "    SFT('###########################');",
              "    SFT('###########################');",
              "    SFT('###########################');",
              "    SFT(' ');",
              "",
              "    int excess_count=0;",
              "    int highest_value=0;",
              "    if(!param_max_value) highest_value=1000000000;",
              "    str highest_value_name='None';",
              "    str numInCfg;",
              "    str numInCfgMM;",
              "    int acrynat_value = 0;",
              "    int max_MM_value = 0;",
              "    int end_value = 0;",
              "    int check = 0;",
              "    int acryn_race_set = 0;",
              "    int MM_race_set = 0;",
              "",
              "    str checkedMM = '*';",
              "",
              "    for(i = 0; i < BonusCount(); i = i + 1)",
              "    {",
              "        end_value = 0;",
              "        acrynat_value = 0;",
              "",
              "        numInCfg=BonusNumInCfg(i);",
              "        //Пропускаем Акринатор",
              "        if(numInCfg == '498')continue;",
              "        //Исключаем не акрины",
              "        if(!BonusIsSpecial(i))continue;",
              "        //Исключаем уникальные микромодули",
              "        if(CT('MicroModuls.'+numInCfg+'.UniqueMM'))continue;",
              "",
              "        str equipOn=CT('MicroModuls.'+numInCfg+'.Equipments');",
              "",
              "        //Исключаем бонусы, неподходящие для указанного ГТУ",
              "        if(GTL < 8.0 * (0.01 * CT('MicroModuls.'+numInCfg+'.Priority')))continue;",
              "",
              "        //Пропускаем скипнутые акрины",
              "        if(findsubstr(skipAcrynsList, '*' + numInCfg + '*') > -1)continue;",
              "",
              "        int uniqueMM_check = 0;",
              "",
              "        //Переходим к проверке значения указанного параметра бонуса",
              "        //Если для проверки выбрано максимальное значение параметра",
              "        if(param_max_value)",
              "        {",
              "            //Исключаем акрины, значение искомого бонуса в которых не положительно",
              "            if(param_type != 'Max damage per turn')",
              "            {",
              "                if(BonusValue(i, bonus) <= 0)continue;",
              "            }",
              "            else",
              "            {",
              "                if(BonusValue(i, bonus) <= 0 && ((BonusValue(i, bonShots) <= 0 && shot_type_check) || !shot_type_check) && BonusValue(i, bonAttacks) <= 0)continue;",
              "            }",
              "",
              "            if(CT('MicroModuls.'+numInCfg+'.BlockMM') != 1)",
              "            {",
              "                //Чистое значение данного акрина, без доп. бонусов",
              "                check = 0;",
              "                if(dam_type == 'NotWeapon')check = 1;",
              "                else",
              "                {",
              "                    tstr = CT('MicroModuls.'+numInCfg+'.Equipments');",
              "                    if(tstr == '')check = 1;",
              "                    else if(findsubstr(tstr, type) > -1 || findsubstr(tstr, dam_type) > -1 || tstr == 'Any')check = 1;",
              "                }",
              "                if(check)",
              "                {",
              "                    if(param_type != 'Max damage per turn')",
              "                    {",
              "                        end_value = param + BonusValue(i, bonus);",
              "",
              "                        if(end_value > param_max_value)",
              "                        {",
              "                            SFT(numInCfg);",
              "                            SFT('Higher on: ' + (end_value - param_max_value));",
              "                            SFT('---------------------');",
              "",
              "                            if(end_value > highest_value)",
              "                            {",
              "                                highest_value=end_value;",
              "                                highest_value_name=numInCfg;",
              "                            }",
              "",
              "                            excess_count=excess_count+1;",
              "                        }",
              "                    }",
              "                    else",
              "                    {",
              "                        end_value = param + BonusValue(i, bonus);",
              "                        if(shot_type_check) end_value = end_value * (shots_count + BonusValue(i, bonShots));",
              "                        end_value = end_value * (attacks_count + BonusValue(i, bonAttacks));",
              "",
              "                        if(end_value > param_max_value)",
              "                        {",
              "                            SFT(numInCfg);",
              "                            SFT('Higher on: ' + (end_value - param_max_value));",
              "                            SFT('---------------------');",
              "",
              "                            if(end_value > highest_value)",
              "                            {",
              "                                highest_value=end_value;",
              "                                highest_value_name=numInCfg;",
              "                            }",
              "",
              "                            excess_count=excess_count+1;",
              "                        }",
              "                    }",
              "                }",
              "",
              "                //\"Вставляем\" Акринатор",
              "                if(InstallAcrynator && CT('MicroModuls.'+numInCfg+'.BlockMM') != 1)",
              "                {",
              "                    //Если проверка не была запущена для корпуса или оружия",
              "                    if(type != 'Hull' && dam_type == 'NotWeapon')",
              "                    {",
              "                        if(findsubstr(equipOn, 'WEnergy') > -1)check = 1;",
              "                        else if(findsubstr(equipOn, 'WSplinter') > -1)check = 1;",
              "                        else if(findsubstr(equipOn, 'WMissile') > -1)check = 1;",
              "",
              "                        if(!check)",
              "                        {",
              "                            for(k=1; k<=18; k=k+1)",
              "                            {",
              "                                if(k <= 9)tstr='W0'+k;",
              "                                else tstr='W'+k;",
              "",
              "                                if(findsubstr(equipOn, tstr) > -1)",
              "                                {",
              "                                    check=1;",
              "                                    break;",
              "                                }",
              "                            }",
              "                            if(!check)",
              "                            {",
              "                                for(k=0; k<CustomWeaponTypes(); k=k+1)",
              "                                {",
              "                                    tstr=CustomWeaponTypes(k);",
              "",
              "                                    if(findsubstr(equipOn, tstr) > -1)",
              "                                    {",
              "                                        check=1;",
              "                                        break;",
              "                                    }",
              "                                }",
              "                            }",
              "                        }",
              "                        if(findsubstr(equipOn, 'Hull') == -1 && !check)",
              "                        {",
              "                            acrynat_value = param + (3 * BonusValue(i, bonus));",
              "                        }",
              "",
              "                        //Проверяем, не превышает ли бонус акрина лимитное значение с установленным Акринатором",
              "                        if(acrynat_value > param_max_value && (3 * BonusValue(i, bonus)))",
              "                        {",
              "                            SFT(numInCfg + ' + Acrynator');",
              "                            SFT('Higher on: ' + (acrynat_value - param_max_value));",
              "                            SFT('---------------------');",
              "",
              "                            if(acrynat_value > highest_value)",
              "                            {",
              "                                highest_value = acrynat_value;",
              "                                highest_value_name = numInCfg + ' + Acrynator';",
              "                            }",
              "",
              "                            excess_count=excess_count+1;",
              "                        }",
              "                    }",
              "                }",
              "",
              "                //Перебор ММ",
              "                if(InstallMM && CT('MicroModuls.'+numInCfg+'.BlockMM') != 1)",
              "                {",
              "                    for(k=0; k<BonusCount(); k=k+1)",
              "                    {",
              "                        max_MM_value = 0;",
              "                        numInCfgMM=BonusNumInCfg(k);",
              "",
              "                        //Исключаем ММ, значение искомого бонуса в которых не положительно",
              "                        if(param_type != 'Max damage per turn')",
              "                        {",
              "                            if(BonusValue(k, bonus) <= 0)continue;",
              "                        }",
              "                        else",
              "                        {",
              "                            if(BonusValue(k, bonus) <= 0 && ((BonusValue(k, bonShots) <= 0 && shot_type_check) || !shot_type_check) && BonusValue(k, bonAttacks) <= 0)continue;",
              "                        }",
              "",
              "                        //Исключаем акрины",
              "                        uniqueMM_check = CT('MicroModuls.'+numInCfgMM+'.UniqueMM');",
              "                        if(BonusIsSpecial(k))",
              "                        {",
              "                            if(uniqueMM_check)",
              "                            {",
              "                                if(!InstallUniqueMM)continue;",
              "                            }",
              "                            else continue;",
              "                        }",
              "",
              "                        //Пропускаем уровни ММ, которые были отсечены фильтром",
              "                        if(!uniqueMM_check)",
              "                        {",
              "                            //Оставляем только ММ первого уровня",
              "                            if(InstallMM == 1)",
              "                            {",
              "                                if(BonusPriority(k) > 30)continue;",
              "                            }",
              "                            //Оставляем только ММ второго уровня",
              "                            else if(InstallMM == 2)",
              "                            {",
              "                                if(BonusPriority(k) < 31 || BonusPriority(k) > 69)continue;",
              "                            }",
              "                            //Оставляем только ММ третьего уровня",
              "                            else if(InstallMM == 3)",
              "                            {",
              "                                if(BonusPriority(k) < 70)continue;",
              "                            }",
              "                        }",
              "",
              "                        //Проверяем на предмет совместимости с объектом поиска (оборудкой, имеющей подходящие параметры) сперва сам ММ",
              "                        tstr = CT('MicroModuls.'+numInCfgMM+'.Equipments');",
              "                        if(findsubstr(tstr, type) == -1 && findsubstr(tstr, dam_type) == -1 && tstr != 'Any' && tstr != '')continue;",
              "",
              "                        //После чего проверяем, не превышает ли собственный бонус данного ММ лимитное значение даже без учёта акрина",
              "                        if(findsubstr(checkedMM, '*' + numInCfgMM + '*') == -1)",
              "                        {",
              "                            if(param_type != 'Max damage per turn')",
              "                            {",
              "                                max_MM_value = param + BonusValue(k, bonus);",
              "                            }",
              "                            else",
              "                            {",
              "                                max_MM_value = param + BonusValue(k, bonus);",
              "                                if(shot_type_check) max_MM_value = max_MM_value * (shots_count + BonusValue(k, bonShots));",
              "                                max_MM_value = max_MM_value * (attacks_count + BonusValue(k, bonAttacks));",
              "                            }",
              "",
              "                            if(max_MM_value > param_max_value)",
              "                            {",
              "                                SFT('None + ' + numInCfgMM);",
              "                                SFT('Higher on: ' + (max_MM_value - param_max_value));",
              "                                SFT('---------------------');",
              "",
              "                                if(max_MM_value > highest_value)",
              "                                {",
              "                                    highest_value = max_MM_value;",
              "                                    highest_value_name = 'None + ' + numInCfgMM;",
              "                                }",
              "",
              "                                checkedMM = checkedMM + numInCfgMM + '*';",
              "                                excess_count=excess_count+1;",
              "                            }",
              "                        }",
              "",
              "                        //А затем и акрин",
              "                        tstr = CT('MicroModuls.'+numInCfg+'.Equipments');",
              "                        if(findsubstr(tstr, type) == -1 && findsubstr(tstr, dam_type) == -1 && tstr != 'Any' && tstr != '')continue;",
              "",
              "                        //Затем делаем общую проверку на соответствие типа акрина типу ММ",
              "                        tstr = CT('MicroModuls.'+numInCfgMM+'.Equipments');",
              "                        if(findsubstr(tstr, type) == -1 && findsubstr(tstr, dam_type) == -1 && tstr != 'Any' && tstr != '')continue;",
              "",
              "                        //Далее переходим к проверке соответствия конкретных рас бонусов",
              "                        //Определяем сет рас для акрина",
              "                        acryn_race_set = RaceSetDefine(CT('MicroModuls.'+numInCfg+'.Owner'), 'Acryn');",
              "",
              "                        //Определяем сет рас для ММ",
              "                        MM_race_set = RaceSetDefine(CT('MicroModuls.'+numInCfgMM+'.Owner'), 'MM');",
              "",
              "                        //Сравниваем полученные сеты",
              "                        if(!(acryn_race_set & MM_race_set))continue;",
              "",
              "                        if(param_type != 'Max damage per turn')",
              "                        {",
              "                            max_MM_value = param + BonusValue(i, bonus) + BonusValue(k, bonus);",
              "                        }",
              "                        else",
              "                        {",
              "                            max_MM_value = param + BonusValue(i, bonus) + BonusValue(k, bonus);",
              "                            if(shot_type_check) max_MM_value = max_MM_value * (shots_count + BonusValue(i, bonShots) + BonusValue(k, bonShots));",
              "                            max_MM_value = max_MM_value * (attacks_count + BonusValue(i, bonAttacks) + BonusValue(k, bonAttacks));",
              "                        }",
              "",
              "                        if(max_MM_value > param_max_value)",
              "                        {",
              "                            SFT(numInCfg + ' + ' + numInCfgMM);",
              "                            SFT('Higher on: ' + (max_MM_value - param_max_value));",
              "                            SFT('---------------------');",
              "",
              "                            if(max_MM_value > highest_value)",
              "                            {",
              "                                highest_value = max_MM_value;",
              "                                highest_value_name = numInCfg + ' + ' + numInCfgMM;",
              "                            }",
              "",
              "                            excess_count = excess_count + 1;",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "        }",
              "        //Если для проверки выбрано минимальное значение параметра",
              "        else",
              "        {",
              "            //Исключаем акрины, значение искомого бонуса в которых не отрицательно",
              "            if(param_type != 'Max damage per turn')",
              "            {",
              "                if(BonusValue(i, bonus) >= 0)continue;",
              "            }",
              "            else",
              "            {",
              "                if(BonusValue(i, bonus) >= 0 && ((BonusValue(i, bonShots) >= 0 && shot_type_check) || !shot_type_check) && BonusValue(i, bonAttacks) >= 0)continue;",
              "            }",
              "",
              "            if(CT('MicroModuls.' + numInCfg + '.BlockMM') != 1)",
              "            {",
              "                //Чистое значение данного акрина, без доп. бонусов",
              "                check = 0;",
              "                if(dam_type == 'NotWeapon') check = 1;",
              "                else",
              "                {",
              "                    tstr = CT('MicroModuls.' + numInCfg + '.Equipments');",
              "                    if(tstr == '') check = 1;",
              "                    else if(findsubstr(tstr, type) > -1 || findsubstr(tstr, dam_type) > -1 || tstr == 'Any')check = 1;",
              "                }",
              "                if(check)",
              "                {",
              "                    if(param_type != 'Max damage per turn')",
              "                    {",
              "                        end_value = param + BonusValue(i, bonus);",
              "                    }",
              "                    else",
              "                    {",
              "                        end_value = param + BonusValue(i, bonus);",
              "                        if(shot_type_check)",
              "                        {",
              "                            tint = shots_count + BonusValue(i, bonShots);",
              "                            if(tint < 1) tint = 1;",
              "                            end_value = end_value * tint;",
              "                        }",
              "                        tint = shots_count + BonusValue(i, bonAttacks);",
              "                        if(tint < 1) tint = 1;",
              "                        end_value = end_value * tint;",
              "                    }",
              "",
              "                    if(end_value < param_min_value)",
              "                    {",
              "                        SFT(numInCfg);",
              "                        SFT('Lower on: ' + abs(abs(param_min_value) - abs(end_value)));",
              "                        SFT('---------------------');",
              "",
              "                        if(end_value < highest_value)",
              "                        {",
              "                            highest_value=end_value;",
              "                            highest_value_name=numInCfg;",
              "                        }",
              "",
              "                        excess_count = excess_count + 1;",
              "                    }",
              "                }",
              "",
              "                //Перебор ММ",
              "                if(InstallMM && CT('MicroModuls.' + numInCfg + '.BlockMM') != 1)",
              "                {",
              "                    for(k = 0; k < BonusCount(); k = k + 1)",
              "                    {",
              "                        max_MM_value = 0;",
              "                        numInCfgMM = BonusNumInCfg(k);",
              "",
              "                        //Исключаем ММ, значение искомого бонуса которых не отрицательно",
              "                        if(param_type != 'Max damage per turn')",
              "                        {",
              "                            if(BonusValue(k, bonus) >= 0)continue;",
              "                        }",
              "                        else",
              "                        {",
              "                            if(BonusValue(k, bonus) >= 0 && ((BonusValue(k, bonShots) >= 0 && shot_type_check) || !shot_type_check) && BonusValue(k, bonAttacks) >= 0)continue;",
              "                        }",
              "",
              "                        //Исключаем акрины",
              "                        uniqueMM_check = CT('MicroModuls.'+numInCfgMM+'.UniqueMM');",
              "                        if(BonusIsSpecial(k))",
              "                        {",
              "                            if(uniqueMM_check)",
              "                            {",
              "                                if(!InstallUniqueMM)continue;",
              "                            }",
              "                            else continue;",
              "                        }",
              "",
              "                        //Пропускаем уровни ММ, которые были отсечены фильтром",
              "                        if(!uniqueMM_check)",
              "                        {",
              "                            //Оставляем только ММ первого уровня",
              "                            if(InstallMM == 1)",
              "                            {",
              "                                if(BonusPriority(k) > 30)continue;",
              "                            }",
              "                            //Оставляем только ММ второго уровня",
              "                            else if(InstallMM == 2)",
              "                            {",
              "                                if(BonusPriority(k) < 31 || BonusPriority(k) > 69)continue;",
              "                            }",
              "                            //Оставляем только ММ третьего уровня",
              "                            else if(InstallMM == 3)",
              "                            {",
              "                                if(BonusPriority(k) < 70)continue;",
              "                            }",
              "                        }",
              "",
              "                        //Проверяем на предмет совместимости с объектом поиска (оборудкой, имеющей подходящие параметры) сперва сам ММ",
              "                        tstr = CT('MicroModuls.' + numInCfgMM + '.Equipments');",
              "                        if(findsubstr(tstr, type) == -1 && findsubstr(tstr, dam_type) == -1 && tstr != 'Any' && tstr != '')continue;",
              "",
              "                        //После чего проверяем, не превышает ли собственный бонус данного ММ лимитное значение даже без учёта акрина",
              "                        if(findsubstr(checkedMM, '*' + numInCfgMM + '*') == -1)",
              "                        {",
              "                            if(param_type != 'Max damage per turn')",
              "                            {",
              "                                max_MM_value = param + BonusValue(k, bonus);",
              "                            }",
              "                            else",
              "                            {",
              "                                max_MM_value = param + BonusValue(k, bonus);",
              "                                if(shot_type_check)",
              "                                {",
              "                                    tint = shots_count + BonusValue(k, bonShots);",
              "                                    if(tint < 1) tint = 1;",
              "                                    max_MM_value = max_MM_value * tint;",
              "                                }",
              "                                tint = shots_count + BonusValue(k, bonAttacks);",
              "                                if(tint < 1) tint = 1;",
              "                                max_MM_value = max_MM_value * tint;",
              "                            }",
              "",
              "                            if(max_MM_value < param_min_value)",
              "                            {",
              "                                SFT('None + ' + numInCfgMM);",
              "                                SFT('Lower on: ' + abs(abs(param_min_value) - abs(max_MM_value)));",
              "                                SFT('---------------------');",
              "",
              "                                if(max_MM_value < highest_value)",
              "                                {",
              "                                    highest_value = max_MM_value;",
              "                                    highest_value_name = 'None + ' + numInCfgMM;",
              "                                }",
              "",
              "                                checkedMM = checkedMM + numInCfgMM + '*';",
              "                                excess_count=excess_count+1;",
              "                            }",
              "                        }",
              "",
              "                        //А затем и акрин",
              "                        tstr = CT('MicroModuls.'+numInCfg+'.Equipments');",
              "                        if(findsubstr(tstr, type) == -1 && findsubstr(tstr, dam_type) == -1 && tstr != 'Any' && tstr != '')continue;",
              "",
              "                        //Затем делаем общую проверку на соответствие типа акрина типу ММ",
              "                        tstr = CT('MicroModuls.'+numInCfgMM+'.Equipments');",
              "                        if(findsubstr(tstr, type) == -1 && findsubstr(tstr, dam_type) == -1 && tstr != 'Any' && tstr != '')continue;",
              "",
              "                        //Далее переходим к проверке соответствия конкретных рас бонусов",
              "                        //Определяем сет рас для акрина",
              "                        acryn_race_set = RaceSetDefine(CT('MicroModuls.'+numInCfg+'.Owner'), 'Acryn');",
              "",
              "                        //Определяем сет рас для ММ",
              "                        MM_race_set = RaceSetDefine(CT('MicroModuls.'+numInCfgMM+'.Owner'), 'MM');",
              "",
              "                        //Сравниваем полученные сеты",
              "                        if(!(acryn_race_set & MM_race_set))continue;",
              "",
              "",
              "                        if(param_type != 'Max damage per turn')",
              "                        {",
              "                            max_MM_value = param + BonusValue(i, bonus) + BonusValue(k, bonus);",
              "                        }",
              "                        else",
              "                        {",
              "                            max_MM_value = param + BonusValue(i, bonus) + BonusValue(k, bonus);",
              "                            if(shot_type_check)",
              "                            {",
              "                                tint = shots_count + BonusValue(i, bonShots) + BonusValue(k, bonShots);",
              "                                if(tint < 1) tint = 1;",
              "                                max_MM_value = max_MM_value * tint;",
              "                            }",
              "                            tint = shots_count + BonusValue(i, bonAttacks) + BonusValue(k, bonAttacks);",
              "                            if(tint < 1) tint = 1;",
              "                            max_MM_value = max_MM_value * tint;",
              "                        }",
              "",
              "                        if(max_MM_value < param_min_value)",
              "                        {",
              "                            SFT(numInCfg + ' + ' + numInCfgMM);",
              "                            SFT('Lower on: ' + abs(abs(param_min_value) - abs(max_MM_value)));",
              "                            SFT('---------------------');",
              "",
              "                            if(max_MM_value < highest_value)",
              "                            {",
              "                                highest_value = max_MM_value;",
              "                                highest_value_name = numInCfg + ' + ' + numInCfgMM;",
              "                            }",
              "",
              "                            excess_count=excess_count+1;",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "",
              "    SFT(' ');",
              "    SFT('Galaxy tech level: ' + GTL);",
              "    SFT('Param type: ' + param_type);",
              "    SFT('Base value: ' + param);",
              "    if(param_max_value) SFT('The highest value: ' + highest_value_name + ' (' + highest_value + ')');",
              "    else SFT('The lowest value: ' + highest_value_name + ' (' + highest_value + ')');",
              "    SFT('Total excesses: ' + excess_count);",
              "",
              "    SFT(' ');",
              "    SFT('###########################');",
              "    SFT('###########################');",
              "    SFT('###########################');",
              "}",
              "",
              "//Функция для проверки максимального/минимального значения бонусов/штрафов в составе всех возможных наборов оборудки (выводит собранную информацию в игровой лог)",
              "//Для применения, вставьте в исполняемую строку следующую команду (переносы строк убирать не обязательно):",
              "// str itemType = t_DefGenerator;",
              "// str customWeaponType = '';",
              "// int parameterType = 1;",
              "// int bonusType = bonDef;",
              "// int galaxyTechLevel = 8;",
              "// int isInstallMMs = 2;",
              "// int isInstallUniqueMMs = 1;",
              "// int isInstallAcrynator = 1;",
              "// int isInstallArtefacts = 1;",
              "// int isAppliedStimulantsAndDiseases = 1;",
              "// str skipAcrynsList = '*ExpTC_Lifeboat*ExpAcryn_DomAcryn*ShuMiniBoss_DreadnoughtMaloc*ShuMiniBoss_DreadnoughtPeleng*ShuMiniBoss_DreadnoughtPeople*ShuMiniBoss_DreadnoughtFei*ShuMiniBoss_DreadnoughtGaal*ShuKlissan_Potentia*ShuKlissan_Bubble*ShuKlissan_Chasia*ShuKlissan_Velhmust*ShuKlissan_Nivelia*ShuKlissan_Askia*ShuKlissan_Fungusia*ShuKlissan_Plasmalemma*ShuKlissan_Regenerative*ShuKlissan_Combishell*ShuKlissan_Recapacit*';",
              "// CheckParamRangeInSet(itemType, customWeaponType, galaxyTechLevel, parameterType, bonusType, isInstallMMs, isInstallUniqueMMs, isInstallAcrynator, isInstallArtefacts, isAppliedStimulantsAndDiseases, skipAcrynsList);",
              "function CheckParamRangeInSet(str type, str custom_type, GTL, param, bonus, InstallMM, InstallUniqueMM, InstallAcrynator, InstallArtefacts, InstallStimulants, skipAcrynsList)",
              "{",
              "    //Определяем базовый параметр оборудки с учётом максимального улучшения на НБ для указанного ГТУ",
              "    type=SetBaseType(type, custom_type, GTL, param);",
              "",
              "    str dam_type = GetParFromString(type, ',', 1, 1);",
              "    param = GetParFromString(type, ',', 2, 1);",
              "    str param_type = GetParFromString(type, ',', 3, 0);",
              "    int shots_count = GetParFromString(type, ',', 4, 0);",
              "    int attacks_count = GetParFromString(type, ',', 5, 0);",
              "    int shot_type_check = GetParFromString(type, ',', 6, 0);",
              "    type = GetParFromString(type, ',', 0, 1);",
              "",
              "    str cur_search_type = type;",
              "",
              "    str w_type;",
              "    //Проверяем, ищем ли мы информацию по оружию",
              "    if(type == 'Hull') w_type = 'None';",
              "    else if(type == 'Engine') w_type = 'None';",
              "    else if(type == 'FuelTank') w_type = 'None';",
              "    else if(type == 'Radar') w_type = 'None';",
              "    else if(type == 'Scaner') w_type = 'None';",
              "    else if(type == 'Droid') w_type = 'None';",
              "    else if(type == 'Hook') w_type = 'None';",
              "    else if(type == 'DefGenerator') w_type = 'None';",
              "    else w_type = type;",
              "",
              "    SFT('###########################');",
              "    SFT('###########################');",
              "    SFT('###########################');",
              "    SFT(' ');",
              "",
              "    int highest_hull = 0;",
              "    str highest_hull_name = 'None';",
              "    int hull_best_MM = -1;",
              "",
              "    int highest_gun1 = 0;",
              "    str highest_gun1_name = 'None';",
              "    int gun1_best_MM = -1;",
              "",
              "    int highest_gun2 = 0;",
              "    str highest_gun2_name = 'None';",
              "    int gun2_best_MM = -1;",
              "",
              "    int highest_gun3 = 0;",
              "    str highest_gun3_name = 'None';",
              "    int gun3_best_MM = -1;",
              "",
              "    int highest_gun4 = 0;",
              "    str highest_gun4_name = 'None';",
              "    int gun4_best_MM = -1;",
              "",
              "    int highest_gun5 = 0;",
              "    str highest_gun5_name = 'None';",
              "    int gun5_best_MM = -1;",
              "",
              "    int highest_engine = 0;",
              "    str highest_engine_name = 'None';",
              "    int engine_best_MM = -1;",
              "",
              "    int highest_fuel = 0;",
              "    str highest_fuel_name = 'None';",
              "    int fuel_best_MM = -1;",
              "",
              "    int highest_radar = 0;",
              "    str highest_radar_name = 'None';",
              "    int radar_best_MM = -1;",
              "",
              "    int highest_scanner = 0;",
              "    str highest_scanner_name = 'None';",
              "    int scanner_best_MM = -1;",
              "",
              "    int highest_droid = 0;",
              "    str highest_droid_name = 'None';",
              "    int droid_best_MM = -1;",
              "",
              "    int highest_hook = 0;",
              "    str highest_hook_name = 'None';",
              "    int hook_best_MM = -1;",
              "",
              "    int highest_def = 0;",
              "    str highest_def_name = 'None';",
              "    int def_best_MM = -1;",
              "",
              "    int check;",
              "    int excess_count=0;",
              "    int highest_value;",
              "    str highest_value_name;",
              "    str temp_w_type = 'None';",
              "    str end_w_type = 'None';",
              "    int acryn_param = 0;",
              "    int best_MM = -1;",
              "    int best_MM_end = -1;",
              "    int best_MM_value;",
              "    str numInCfgMM;",
              "    str uniqueMM_list = '*';",
              "    int acryn_race_set = 0;",
              "    int MM_race_set = 0;",
              "    int trion_count = 0;",
              "    str numInCfg;",
              "    int roll_counts;",
              "",
              "    for(j=1; j<=9; j=j+1)",
              "    {",
              "        roll_counts = 1;",
              "",
              "        if(j == 1)type='Hull';",
              "        else if(j == 2)",
              "        {",
              "            type='Weapon';",
              "            if(w_type == 'None')roll_counts = 5;",
              "        }",
              "        else if(j == 3) type='Engine';",
              "        else if(j == 4) type='FuelTank';",
              "        else if(j == 5) type='Radar';",
              "        else if(j == 6) type='Scaner';",
              "        else if(j == 7) type='Droid';",
              "        else if(j == 8) type='Hook';",
              "        else if(j == 9) type='DefGenerator';",
              "",
              "        while(roll_counts)",
              "        {",
              "            highest_value = 0;",
              "            highest_value_name = 'None';",
              "            best_MM = -1;",
              "            best_MM_end = -1;",
              "            best_MM_value = 0;",
              "",
              "            for(i = 0; i < BonusCount(); i = i + 1)",
              "            {",
              "                numInCfg = BonusNumInCfg(i);",
              "                //Пропускаем Акринатор",
              "                if(numInCfg == '498')continue;",
              "                //Пропускаем ММ",
              "                if(!BonusIsSpecial(i))continue;",
              "                //Исключаем уникальные микромодули",
              "                if(CT('MicroModuls.'+numInCfg+'.UniqueMM'))continue;",
              "",
              "                //Пропускаем скипнутые акрины",
              "                if(findsubstr(skipAcrynsList, '*' + numInCfg + '*') > -1)continue;",
              "",
              "                //Исключаем бонусы, неподходящие для указанного ГТУ",
              "                if(GTL < 8.0*(0.01*CT('MicroModuls.'+numInCfg+'.Priority')))continue;",
              "",
              "                //Исключаем бонусы, неподходящие для текущего оборудования/оружия",
              "                str equipOn=CT('MicroModuls.'+numInCfg+'.Equipments');",
              "                if(equipOn != 'Any' && equipOn != '')",
              "                {",
              "                    if(type != 'Weapon')",
              "                    {",
              "                        if(findsubstr(equipOn, type) == -1)continue;",
              "                    }",
              "                    //Перебираем все возможные типы орудий",
              "                    else",
              "                    {",
              "                        check=0;",
              "",
              "                        //Если проверяем случайный оружейный акрин в поисках бонуса для оборудки",
              "                        if(w_type == 'None')",
              "                        {",
              "                            temp_w_type = 'None';",
              "",
              "                            if(findsubstr(equipOn, 'WEnergy') > -1)",
              "                            {",
              "                                dam_type = 'WEnergy';",
              "                                check = 1;",
              "                            }",
              "                            else if(findsubstr(equipOn, 'WSplinter') > -1)",
              "                            {",
              "                                dam_type = 'WSplinter';",
              "                                check = 1;",
              "                            }",
              "                            else if(findsubstr(equipOn, 'WMissile') > -1)",
              "                            {",
              "                                dam_type = 'WMissile';",
              "                                check = 1;",
              "                            }",
              "",
              "                            if(!check)",
              "                            {",
              "                                for(k=1; k<=18; k=k+1)",
              "                                {",
              "                                    if(k <= 9)temp_w_type='W0'+k;",
              "                                    else temp_w_type='W'+k;",
              "",
              "                                    if(findsubstr(equipOn, temp_w_type) > -1)",
              "                                    {",
              "                                        check=1;",
              "                                        break;",
              "                                    }",
              "                                }",
              "                                if(!check)",
              "                                {",
              "                                    for(k=0; k<CustomWeaponTypes(); k=k+1)",
              "                                    {",
              "                                        temp_w_type=CustomWeaponTypes(k);",
              "",
              "                                        if(findsubstr(equipOn, temp_w_type) > -1)",
              "                                        {",
              "                                            check=1;",
              "                                            break;",
              "                                        }",
              "                                    }",
              "                                }",
              "                            }",
              "                        }",
              "                        //Если проверяем акрин конкретного оружия в поисках бонуса для оружия",
              "                        else",
              "                        {",
              "                            if(findsubstr(equipOn, w_type) > -1)check=1;",
              "                            else if(findsubstr(equipOn, dam_type) > -1)check=1;",
              "                        }",
              "",
              "                        if(!check)continue;",
              "                    }",
              "                }",
              "",
              "                //Если в сете применено уже как минимум три трионки, пропускаем все остальные",
              "                if(trion_count >= 3)",
              "                {",
              "                    if(!findsubstr(numInCfg, 'ExpAcryn_'))continue;",
              "                }",
              "",
              "                //Перебор ММ",
              "                if(InstallMM && CT('MicroModuls.'+numInCfg+'.BlockMM') != 1)",
              "                {",
              "                    int uniqueMM_check = 0;",
              "                    int uniqueMM_end_check = 0;",
              "                    for(k=0; k<BonusCount(); k=k+1)",
              "                    {",
              "                        numInCfgMM = BonusNumInCfg(k);",
              "",
              "                        //Исключаем акрины и уникальные ММ (если стоит маркер)",
              "                        uniqueMM_check = 0;",
              "                        uniqueMM_check = CT('MicroModuls.'+numInCfgMM+'.UniqueMM');",
              "                        //А если маркер на исключение уникальных ММ не стоит, то запоминаем, является ли данный ММ уникальным",
              "                        if(InstallUniqueMM)",
              "                        {",
              "                            if(BonusIsSpecial(k))continue;",
              "                            //Пропускаем уникальные ММ, которые уже были использованы в данном сете",
              "                            else if(uniqueMM_check == 1)",
              "                            {",
              "                                if(findsubstr(uniqueMM_list, '*' + numInCfgMM + '*') > -1)continue;",
              "                            }",
              "                        }",
              "                        else",
              "                        {",
              "                            if(BonusIsSpecial(k))",
              "                            {",
              "                                if(uniqueMM_check)continue;",
              "                            }",
              "                        }",
              "",
              "                        //Пропускаем уровни ММ, которые были отсечены фильтром",
              "                        if(!uniqueMM_check)",
              "                        {",
              "                            //Оставляем только ММ первого уровня",
              "                            if(InstallMM == 1)",
              "                            {",
              "                                if(BonusPriority(k) > 30)continue;",
              "                            }",
              "                            //Оставляем только ММ второго уровня",
              "                            else if(InstallMM == 2)",
              "                            {",
              "                                if(BonusPriority(k) < 31 || BonusPriority(k) > 69)continue;",
              "                            }",
              "                            //Оставляем только ММ третьего уровня",
              "                            else if(InstallMM == 3)",
              "                            {",
              "                                if(BonusPriority(k) < 70)continue;",
              "                            }",
              "                        }",
              "",
              "                        //Проверяем возможность установки ММ на данный акрин оборудки",
              "                        if(type != 'Weapon')",
              "                        {",
              "                            tstr = CT('MicroModuls.'+numInCfgMM+'.Equipments');",
              "",
              "                            //Сперва делаем общую проверку на соответствие типа акрина типу ММ",
              "                            if(findsubstr(tstr, type) == -1 && tstr != 'Any' && tstr != '')continue;",
              "                            //Далее переходим к проверке соответствия конкретных рас бонусов",
              "                            else",
              "                            {",
              "                                //Определяем сет рас для акрина",
              "                                acryn_race_set = RaceSetDefine(CT('MicroModuls.'+numInCfg+'.Owner'), 'Acryn');",
              "",
              "                                //Определяем сет рас для ММ",
              "                                MM_race_set = RaceSetDefine(CT('MicroModuls.'+numInCfgMM+'.Owner'), 'MM');",
              "",
              "                                //Сравниваем полученные сеты",
              "                                if(!(acryn_race_set & MM_race_set))continue;",
              "                            }",
              "                        }",
              "                        //Проверяем возможность установки ММ на данный акрин оружия",
              "                        else",
              "                        {",
              "                            tstr = CT('MicroModuls.'+numInCfgMM+'.Equipments');",
              "                            //Сперва делаем общую проверку на соответствие типа акрина типу ММ",
              "                            check = 0;",
              "                            if(findsubstr(tstr, temp_w_type) == -1 && findsubstr(tstr, 'dam_type') == -1 && tstr != 'Any' && tstr != '')",
              "                            {",
              "                                //Если конкретное оружие мы не ищем, то подойдёт ММ на любую пушку",
              "                                if(temp_w_type != 'None')continue;",
              "                                else if(findsubstr(tstr, 'WEnergy') == -1 && findsubstr(tstr, 'WSplinter') == -1 && findsubstr(tstr, 'WMissile') == -1)continue;",
              "                                else check = 1;",
              "                            }",
              "                            //Далее переходим к проверке соответствия конкретных рас бонусов",
              "                            if(check)",
              "                            {",
              "                                //Определяем сет рас для акрина",
              "                                acryn_race_set = RaceSetDefine(CT('MicroModuls.'+numInCfg+'.Owner'), 'Acryn');",
              "",
              "                                //Определяем сет рас для ММ",
              "                                MM_race_set = RaceSetDefine(CT('MicroModuls.'+numInCfgMM+'.Owner'), 'MM');",
              "",
              "                                //Сравниваем полученные сеты",
              "                                if(!(acryn_race_set & MM_race_set))continue;",
              "                            }",
              "                        }",
              "",
              "                        tint = BonusValue(k, bonus);",
              "                        if(tint > best_MM_value)",
              "                        {",
              "                            best_MM_value = tint;",
              "                            best_MM = k;",
              "",
              "                            if(uniqueMM_check == 1)uniqueMM_end_check = 1;",
              "                            else uniqueMM_end_check = 0;",
              "                        }",
              "                    }",
              "",
              "                    //Делаем пометку, что уникальный микромодуль уже был применён в данном сете оборудки",
              "                    if(uniqueMM_end_check)uniqueMM_list = uniqueMM_list + numInCfgMM + '*';",
              "                }",
              "",
              "                tint = BonusValue(i, bonus);",
              "                if(!InstallAcrynator || type == 'Hull' || type == 'Weapon' || CT('MicroModuls.'+numInCfg+'.BlockMM') == 1)",
              "                {",
              "                    if((tint + best_MM_value) > highest_value)",
              "                    {",
              "                        if(tint > 0)",
              "                        {",
              "                            highest_value = tint;",
              "                            highest_value_name = numInCfg;",
              "                            if(type == 'Weapon')",
              "                            {",
              "                                if(temp_w_type != 'None')end_w_type = temp_w_type;",
              "                                else end_w_type = w_type;",
              "                            }",
              "                        }",
              "                        best_MM_end = best_MM;",
              "                    }",
              "                }",
              "                //Вставляем Акринатор, если был выставлен соответствующий маркер",
              "                else",
              "                {",
              "                    if((3 * tint) > highest_value)",
              "                    {",
              "                        //Даже если акрин с ММ окажется лучше акрина с акринатором, запоминаем значение бонуса с акринатором на случай подстановки акринатора в другой акрин",
              "                        if((3 * tint) > (tint + best_MM_value) || type != cur_search_type)",
              "                        {",
              "                            if(tint)",
              "                            {",
              "                                highest_value = (3 * tint);",
              "                                highest_value_name = numInCfg + ' + Acrynator';",
              "                            }",
              "                            best_MM_end = best_MM;",
              "                        }",
              "                        else",
              "                        {",
              "                            if(tint)",
              "                            {",
              "                                highest_value = tint;",
              "                                highest_value_name = numInCfg;",
              "                            }",
              "                            best_MM_end = best_MM;",
              "                        }",
              "                    }",
              "                }",
              "",
              "                best_MM_value = 0;",
              "            }",
              "",
              "            //Считаем трионку, попавшую в сет",
              "            if(!findsubstr(highest_value_name, 'ExpAcryn_'))",
              "            {",
              "                trion_count = trion_count + 1;",
              "            }",
              "",
              "            if(j == 1)",
              "            {",
              "                highest_hull=highest_value;",
              "                highest_hull_name=highest_value_name;",
              "                hull_best_MM = best_MM_end;",
              "            }",
              "            else if(j == 2)",
              "            {",
              "                if(roll_counts == 5)",
              "                {",
              "                    highest_gun5=highest_value;",
              "                    highest_gun5_name=highest_value_name;",
              "                    gun5_best_MM = best_MM_end;",
              "                }",
              "                else if(roll_counts == 4)",
              "                {",
              "                    highest_gun4=highest_value;",
              "                    highest_gun4_name=highest_value_name;",
              "                    gun4_best_MM = best_MM_end;",
              "                }",
              "                else if(roll_counts == 3)",
              "                {",
              "                    highest_gun3=highest_value;",
              "                    highest_gun3_name=highest_value_name;",
              "                    gun3_best_MM = best_MM_end;",
              "                }",
              "                else if(roll_counts == 2)",
              "                {",
              "                    highest_gun2=highest_value;",
              "                    highest_gun2_name=highest_value_name;",
              "                    gun2_best_MM = best_MM_end;",
              "                }",
              "                else if(roll_counts == 1)",
              "                {",
              "                    highest_gun1=highest_value;",
              "                    highest_gun1_name=highest_value_name;",
              "                    gun1_best_MM = best_MM_end;",
              "                }",
              "            }",
              "            else if(j == 3)",
              "            {",
              "                highest_engine=highest_value;",
              "                highest_engine_name=highest_value_name;",
              "                engine_best_MM = best_MM_end;",
              "            }",
              "            else if(j == 4)",
              "            {",
              "                highest_fuel=highest_value;",
              "                highest_fuel_name=highest_value_name;",
              "                fuel_best_MM = best_MM_end;",
              "            }",
              "            else if(j == 5)",
              "            {",
              "                highest_radar=highest_value;",
              "                highest_radar_name=highest_value_name;",
              "                radar_best_MM = best_MM_end;",
              "            }",
              "            else if(j == 6)",
              "            {",
              "                highest_scanner=highest_value;",
              "                highest_scanner_name=highest_value_name;",
              "                scanner_best_MM = best_MM_end;",
              "            }",
              "            else if(j == 7)",
              "            {",
              "                highest_droid=highest_value;",
              "                highest_droid_name=highest_value_name;",
              "                droid_best_MM = best_MM_end;",
              "            }",
              "            else if(j == 8)",
              "            {",
              "                highest_hook=highest_value;",
              "                highest_hook_name=highest_value_name;",
              "                hook_best_MM = best_MM_end;",
              "            }",
              "            else if(j == 9)",
              "            {",
              "                highest_def=highest_value;",
              "                highest_def_name=highest_value_name;",
              "                def_best_MM = best_MM_end;",
              "            }",
              "",
              "            roll_counts = roll_counts - 1;",
              "        }",
              "    }",
              "",
              "    //Определяем, какой акрин получает наибольший плюс от установки Акринатора",
              "    int acr_check = 0;",
              "",
              "    int t_highest_engine = 0;",
              "    int t_highest_fuel = 0;",
              "    int t_highest_radar = 0;",
              "    int t_highest_scanner = 0;",
              "    int t_highest_droid = 0;",
              "    int t_highest_hook = 0;",
              "    int t_highest_def = 0;",
              "",
              "    if(findsubstr(highest_engine_name, ' + Acrynator') > -1)t_highest_engine = highest_engine;",
              "    if(findsubstr(highest_fuel_name, ' + Acrynator') > -1)t_highest_fuel = highest_fuel;",
              "    if(findsubstr(highest_radar_name, ' + Acrynator') > -1)t_highest_radar = highest_radar;",
              "    if(findsubstr(highest_scanner_name, ' + Acrynator') > -1)t_highest_scanner = highest_scanner;",
              "    if(findsubstr(highest_droid_name, ' + Acrynator') > -1)t_highest_droid = highest_droid;",
              "    if(findsubstr(highest_hook_name, ' + Acrynator') > -1)t_highest_hook = highest_hook;",
              "    if(findsubstr(highest_def_name, ' + Acrynator') > -1)t_highest_def = highest_def;",
              "",
              "    highest_value = max(t_highest_engine, t_highest_fuel, t_highest_radar, t_highest_scanner, t_highest_droid, t_highest_hook, t_highest_def);",
              "    if(!highest_value)highest_value = -1;",
              "",
              "    SFT('Galaxy tech level: ' + GTL);",
              "    SFT('Parameter type: ' + param_type);",
              "    SFT('Base parameter value: ' + param);",
              "    SFT(' ');",
              "",
              "    //Корпус",
              "    if(hull_best_MM > -1 && cur_search_type == 'Hull')",
              "    {",
              "        SFT('Hull: '+highest_hull_name+' + '+BonusNumInCfg(hull_best_MM)+' ('+(highest_hull + BonusValue(hull_best_MM, bonus))+')');",
              "        param = param + BonusValue(hull_best_MM, bonus);",
              "    }",
              "    else SFT('Hull: '+highest_hull_name+' ('+highest_hull+')');",
              "    param = param + highest_hull;",
              "    //Пушки",
              "    if(w_type == 'None')",
              "    {",
              "        // if(gun1_best_MM > -1)",
              "        // {",
              "            // SFT('Weapon 1: '+highest_gun1_name+' + '+BonusNumInCfg(gun1_best_MM)+' ('+(highest_gun1 + BonusValue(gun1_best_MM, bonus))+')');",
              "            // param = param + BonusValue(gun1_best_MM, bonus);",
              "        // }",
              "        // else",
              "        SFT('Weapon 1: '+highest_gun1_name+' ('+highest_gun1+')');",
              "        param = param + highest_gun1;",
              "",
              "        // if(gun2_best_MM > -1)",
              "        // {",
              "            // SFT('Weapon 2: '+highest_gun2_name+' + '+BonusNumInCfg(gun2_best_MM)+' ('+(highest_gun2 + BonusValue(gun2_best_MM, bonus))+')');",
              "            // param = param + BonusValue(gun2_best_MM, bonus);",
              "        // }",
              "        // else",
              "        SFT('Weapon 2: '+highest_gun2_name+' ('+highest_gun2+')');",
              "        param = param + highest_gun2;",
              "",
              "        // if(gun3_best_MM > -1)",
              "        // {",
              "            // SFT('Weapon 3: '+highest_gun3_name+' + '+BonusNumInCfg(gun3_best_MM)+' ('+(highest_gun3 + BonusValue(gun3_best_MM, bonus))+')');",
              "            // param = param + BonusValue(gun3_best_MM, bonus);",
              "        // }",
              "        // else",
              "        SFT('Weapon 3: '+highest_gun3_name+' ('+highest_gun3+')');",
              "        param = param + highest_gun3;",
              "",
              "        // if(gun4_best_MM > -1)",
              "        // {",
              "            // SFT('Weapon 4: '+highest_gun4_name+' + '+BonusNumInCfg(gun4_best_MM)+' ('+(highest_gun4 + BonusValue(gun4_best_MM, bonus))+')');",
              "            // param = param + BonusValue(gun4_best_MM, bonus);",
              "        // }",
              "        // else",
              "        SFT('Weapon 4: '+highest_gun4_name+' ('+highest_gun4+')');",
              "        param = param + highest_gun4;",
              "",
              "        // if(gun5_best_MM > -1)",
              "        // {",
              "            // SFT('Weapon 5: '+highest_gun5_name+' + '+BonusNumInCfg(gun5_best_MM)+' ('+(highest_gun5 + BonusValue(gun5_best_MM, bonus))+')');",
              "            // param = param + BonusValue(gun5_best_MM, bonus);",
              "        // }",
              "        // else",
              "        SFT('Weapon 5: '+highest_gun5_name+' ('+highest_gun5+')');",
              "        param = param + highest_gun5;",
              "    }",
              "    else",
              "    {",
              "        if(gun1_best_MM > -1)",
              "        {",
              "            SFT('Weapon '+end_w_type+': '+highest_gun1_name+' + '+BonusNumInCfg(gun1_best_MM)+' ('+(highest_gun1 + BonusValue(gun1_best_MM, bonus))+')');",
              "            param = param + BonusValue(gun1_best_MM, bonus);",
              "        }",
              "        else SFT('Weapon '+end_w_type+': '+highest_gun1_name+' ('+highest_gun1+')');",
              "        param = param + highest_gun1;",
              "    }",
              "    //Двигатель",
              "    if(!acr_check && highest_engine == highest_value)",
              "    {",
              "        tint = 0;",
              "        if(engine_best_MM > -1)tint = BonusValue(engine_best_MM, bonus);",
              "",
              "        if(findsubstr(highest_engine_name, ' + Acrynator') > -1)",
              "        {",
              "            if(highest_engine > (highest_engine / 3 + tint))",
              "            {",
              "                SFT('Engine: '+highest_engine_name+' ('+highest_engine+')');",
              "                acr_check = 1;",
              "            }",
              "            //Если значение акрина с ММ выше, чем значение акрина с Акринатором",
              "            else",
              "            {",
              "                highest_engine_name = substr(highest_engine_name, 0, findsubstr(highest_engine_name, ' + Acrynator'));",
              "                highest_engine = highest_engine / 3;",
              "",
              "                if(engine_best_MM > -1 && cur_search_type == 'Engine')",
              "                {",
              "                    SFT('Engine: '+highest_engine_name+' + '+BonusNumInCfg(engine_best_MM)+' ('+(highest_engine + tint)+')');",
              "                    param = param + tint;",
              "                }",
              "                else SFT('Engine: '+highest_engine_name+' ('+highest_engine+')');",
              "            }",
              "        }",
              "        else",
              "        {",
              "            if(engine_best_MM > -1 && cur_search_type == 'Engine')",
              "            {",
              "                SFT('Engine: '+highest_engine_name+' + '+BonusNumInCfg(engine_best_MM)+' ('+(highest_engine + tint)+')');",
              "                param = param + tint;",
              "            }",
              "            else SFT('Engine: '+highest_engine_name+' ('+highest_engine+')');",
              "        }",
              "    }",
              "    else",
              "    {",
              "        if(findsubstr(highest_engine_name, ' + Acrynator') > -1)",
              "        {",
              "            highest_engine_name = substr(highest_engine_name, 0, findsubstr(highest_engine_name, ' + Acrynator'));",
              "            highest_engine = highest_engine / 3;",
              "",
              "            if(engine_best_MM > -1 && cur_search_type == 'Engine')",
              "            {",
              "                SFT('Engine: '+highest_engine_name+' + '+BonusNumInCfg(engine_best_MM)+' ('+(highest_engine + BonusValue(engine_best_MM, bonus))+')');",
              "                param = param + BonusValue(engine_best_MM, bonus);",
              "            }",
              "            else SFT('Engine: '+highest_engine_name+' ('+highest_engine+')');",
              "        }",
              "        else",
              "        {",
              "            if(engine_best_MM > -1 && cur_search_type == 'Engine')",
              "            {",
              "                SFT('Engine: '+highest_engine_name+' + '+BonusNumInCfg(engine_best_MM)+' ('+(highest_engine + BonusValue(engine_best_MM, bonus))+')');",
              "                param = param + BonusValue(engine_best_MM, bonus);",
              "            }",
              "            else SFT('Engine: '+highest_engine_name+' ('+highest_engine+')');",
              "        }",
              "    }",
              "    param = param + highest_engine;",
              "    //Топливный бак",
              "    if(!acr_check && highest_fuel == highest_value)",
              "    {",
              "        tint = 0;",
              "        if(fuel_best_MM > -1)tint = BonusValue(fuel_best_MM, bonus);",
              "",
              "        if(findsubstr(highest_fuel_name, ' + Acrynator') > -1)",
              "        {",
              "            if(highest_fuel > (highest_fuel / 3 + tint))",
              "            {",
              "                SFT('FuelTank: '+highest_fuel_name+' ('+highest_fuel+')');",
              "                acr_check = 1;",
              "            }",
              "            //Если значение акрина с ММ выше, чем значение акрина с Акринатором",
              "            else",
              "            {",
              "                highest_fuel_name = substr(highest_fuel_name, 0, findsubstr(highest_fuel_name, ' + Acrynator'));",
              "                highest_fuel = highest_fuel / 3;",
              "",
              "                if(fuel_best_MM > -1 && cur_search_type == 'FuelTank')",
              "                {",
              "                    SFT('FuelTank: '+highest_fuel_name+' + '+BonusNumInCfg(fuel_best_MM)+' ('+(highest_fuel + tint)+')');",
              "                    param = param + tint;",
              "                }",
              "                else SFT('FuelTank: '+highest_fuel_name+' ('+highest_fuel+')');",
              "            }",
              "        }",
              "        else",
              "        {",
              "            if(fuel_best_MM > -1 && cur_search_type == 'FuelTank')",
              "            {",
              "                SFT('FuelTank: '+highest_fuel_name+' + '+BonusNumInCfg(fuel_best_MM)+' ('+(highest_fuel + tint)+')');",
              "                param = param + tint;",
              "            }",
              "            else SFT('FuelTank: '+highest_fuel_name+' ('+highest_fuel+')');",
              "        }",
              "    }",
              "    else",
              "    {",
              "        if(findsubstr(highest_fuel_name, ' + Acrynator') > -1)",
              "        {",
              "            highest_fuel_name = substr(highest_fuel_name, 0, findsubstr(highest_fuel_name, ' + Acrynator'));",
              "            highest_fuel = highest_fuel / 3;",
              "",
              "            if(fuel_best_MM > -1 && cur_search_type == 'FuelTank')",
              "            {",
              "                SFT('FuelTank: '+highest_fuel_name+' + '+BonusNumInCfg(fuel_best_MM)+' ('+(highest_fuel + BonusValue(fuel_best_MM, bonus))+')');",
              "                param = param + BonusValue(fuel_best_MM, bonus);",
              "            }",
              "            else SFT('FuelTank: '+highest_fuel_name+' ('+highest_fuel+')');",
              "        }",
              "        else",
              "        {",
              "            if(fuel_best_MM > -1 && cur_search_type == 'FuelTank')",
              "            {",
              "                SFT('FuelTank: '+highest_fuel_name+' + '+BonusNumInCfg(fuel_best_MM)+' ('+(highest_fuel + BonusValue(fuel_best_MM, bonus))+')');",
              "                param = param + BonusValue(fuel_best_MM, bonus);",
              "            }",
              "            else SFT('FuelTank: '+highest_fuel_name+' ('+highest_fuel+')');",
              "        }",
              "    }",
              "    param = param + highest_fuel;",
              "    //Радар",
              "    if(!acr_check && highest_radar == highest_value)",
              "    {",
              "        tint = 0;",
              "        if(radar_best_MM > -1)tint = BonusValue(radar_best_MM, bonus);",
              "",
              "        if(findsubstr(highest_radar_name, ' + Acrynator') > -1)",
              "        {",
              "            if(highest_radar > (highest_radar / 3 + tint))",
              "            {",
              "                SFT('Radar: '+highest_radar_name+' ('+highest_radar+')');",
              "                acr_check = 1;",
              "            }",
              "            //Если значение акрина с ММ выше, чем значение акрина с Акринатором",
              "            else",
              "            {",
              "                highest_radar_name = substr(highest_radar_name, 0, findsubstr(highest_radar_name, ' + Acrynator'));",
              "                highest_radar = highest_radar / 3;",
              "",
              "                if(radar_best_MM > -1 && cur_search_type == 'Radar')",
              "                {",
              "                    SFT('Radar: '+highest_radar_name+' + '+BonusNumInCfg(radar_best_MM)+' ('+(highest_radar + tint)+')');",
              "                    param = param + tint;",
              "                }",
              "                else SFT('Radar: '+highest_radar_name+' ('+highest_radar+')');",
              "            }",
              "        }",
              "        else",
              "        {",
              "            if(radar_best_MM > -1 && cur_search_type == 'Radar')",
              "            {",
              "                SFT('Radar: '+highest_radar_name+' + '+BonusNumInCfg(radar_best_MM)+' ('+(highest_radar + tint)+')');",
              "                param = param + tint;",
              "            }",
              "            else SFT('Radar: '+highest_radar_name+' ('+highest_radar+')');",
              "        }",
              "    }",
              "    else",
              "    {",
              "        if(findsubstr(highest_radar_name, ' + Acrynator') > -1)",
              "        {",
              "            highest_radar_name = substr(highest_radar_name, 0, findsubstr(highest_radar_name, ' + Acrynator'));",
              "            highest_radar = highest_radar / 3;",
              "",
              "            if(radar_best_MM > -1 && cur_search_type == 'Radar')",
              "            {",
              "                SFT('Radar: '+highest_radar_name+' + '+BonusNumInCfg(radar_best_MM)+' ('+(highest_radar + BonusValue(radar_best_MM, bonus))+')');",
              "                param = param + BonusValue(radar_best_MM, bonus);",
              "            }",
              "            else SFT('Radar: '+highest_radar_name+' ('+highest_radar+')');",
              "        }",
              "        else",
              "        {",
              "            if(radar_best_MM > -1 && cur_search_type == 'Radar')",
              "            {",
              "                SFT('Radar: '+highest_radar_name+' + '+BonusNumInCfg(radar_best_MM)+' ('+(highest_radar + BonusValue(radar_best_MM, bonus))+')');",
              "                param = param + BonusValue(radar_best_MM, bonus);",
              "            }",
              "            else SFT('Radar: '+highest_radar_name+' ('+highest_radar+')');",
              "        }",
              "    }",
              "    param = param + highest_radar;",
              "    //Сканер",
              "    if(!acr_check && highest_scanner == highest_value)",
              "    {",
              "        tint = 0;",
              "        if(scanner_best_MM > -1)tint = BonusValue(scanner_best_MM, bonus);",
              "",
              "        if(findsubstr(highest_scanner_name, ' + Acrynator') > -1)",
              "        {",
              "            if(highest_scanner > (highest_scanner / 3 + tint))",
              "            {",
              "                SFT('Scanner: '+highest_scanner_name+' ('+highest_scanner+')');",
              "                acr_check = 1;",
              "            }",
              "            //Если значение акрина с ММ выше, чем значение акрина с Акринатором",
              "            else",
              "            {",
              "                highest_scanner_name = substr(highest_scanner_name, 0, findsubstr(highest_scanner_name, ' + Acrynator'));",
              "                highest_scanner = highest_scanner / 3;",
              "",
              "                if(scanner_best_MM > -1 && cur_search_type == 'Scaner')",
              "                {",
              "                    SFT('Scanner: '+highest_scanner_name+' + '+BonusNumInCfg(scanner_best_MM)+' ('+(highest_scanner + tint)+')');",
              "                    param = param + tint;",
              "                }",
              "                else SFT('Scanner: '+highest_scanner_name+' ('+highest_scanner+')');",
              "            }",
              "        }",
              "        else",
              "        {",
              "            if(scanner_best_MM > -1 && cur_search_type == 'Scaner')",
              "            {",
              "                SFT('Scanner: '+highest_scanner_name+' + '+BonusNumInCfg(scanner_best_MM)+' ('+(highest_scanner + tint)+')');",
              "                param = param + tint;",
              "            }",
              "            else SFT('Scanner: '+highest_scanner_name+' ('+highest_scanner+')');",
              "        }",
              "    }",
              "    else",
              "    {",
              "        if(findsubstr(highest_scanner_name, ' + Acrynator') > -1)",
              "        {",
              "            highest_scanner_name = substr(highest_scanner_name, 0, findsubstr(highest_scanner_name, ' + Acrynator'));",
              "            highest_scanner = highest_scanner / 3;",
              "",
              "            if(scanner_best_MM > -1 && cur_search_type == 'Scaner')",
              "            {",
              "                SFT('Scanner: '+highest_scanner_name+' + '+BonusNumInCfg(scanner_best_MM)+' ('+(highest_scanner + BonusValue(scanner_best_MM, bonus))+')');",
              "                param = param + BonusValue(scanner_best_MM, bonus);",
              "            }",
              "            else SFT('Scanner: '+highest_scanner_name+' ('+highest_scanner+')');",
              "        }",
              "        else",
              "        {",
              "            if(scanner_best_MM > -1 && cur_search_type == 'Scaner')",
              "            {",
              "                SFT('Scanner: '+highest_scanner_name+' + '+BonusNumInCfg(scanner_best_MM)+' ('+(highest_scanner + BonusValue(scanner_best_MM, bonus))+')');",
              "                param = param + BonusValue(scanner_best_MM, bonus);",
              "            }",
              "            else SFT('Scanner: '+highest_scanner_name+' ('+highest_scanner+')');",
              "        }",
              "    }",
              "    param = param + highest_scanner;",
              "    //Дроид",
              "    if(!acr_check && highest_droid == highest_value)",
              "    {",
              "        tint = 0;",
              "        if(droid_best_MM > -1)tint = BonusValue(droid_best_MM, bonus);",
              "",
              "        if(findsubstr(highest_droid_name, ' + Acrynator') > -1)",
              "        {",
              "            if(highest_droid > (highest_droid / 3 + tint))",
              "            {",
              "                SFT('Droid: '+highest_droid_name+' ('+highest_droid+')');",
              "                acr_check = 1;",
              "            }",
              "            //Если значение акрина с ММ выше, чем значение акрина с Акринатором",
              "            else",
              "            {",
              "                highest_droid_name = substr(highest_droid_name, 0, findsubstr(highest_droid_name, ' + Acrynator'));",
              "                highest_droid = highest_droid / 3;",
              "",
              "                if(droid_best_MM > -1 && cur_search_type == 'Droid')",
              "                {",
              "                    SFT('Droid: '+highest_droid_name+' + '+BonusNumInCfg(droid_best_MM)+' ('+(highest_droid + tint)+')');",
              "                    param = param + tint;",
              "                }",
              "                else SFT('Droid: '+highest_droid_name+' ('+highest_droid+')');",
              "            }",
              "        }",
              "        else",
              "        {",
              "            if(droid_best_MM > -1 && cur_search_type == 'Droid')",
              "            {",
              "                SFT('Droid: '+highest_droid_name+' + '+BonusNumInCfg(droid_best_MM)+' ('+(highest_droid + tint)+')');",
              "                param = param + tint;",
              "            }",
              "            else SFT('Droid: '+highest_droid_name+' ('+highest_droid+')');",
              "        }",
              "    }",
              "    else",
              "    {",
              "        if(findsubstr(highest_droid_name, ' + Acrynator') > -1)",
              "        {",
              "            highest_droid_name = substr(highest_droid_name, 0, findsubstr(highest_droid_name, ' + Acrynator'));",
              "            highest_droid = highest_droid / 3;",
              "",
              "            if(droid_best_MM > -1 && cur_search_type == 'Droid')",
              "            {",
              "                SFT('Droid: '+highest_droid_name+' + '+BonusNumInCfg(droid_best_MM)+' ('+(highest_droid + BonusValue(droid_best_MM, bonus))+')');",
              "                param = param + BonusValue(droid_best_MM, bonus);",
              "            }",
              "            else SFT('Droid: '+highest_droid_name+' ('+highest_droid+')');",
              "        }",
              "        else",
              "        {",
              "            if(droid_best_MM > -1 && cur_search_type == 'Droid')",
              "            {",
              "                SFT('Droid: '+highest_droid_name+' + '+BonusNumInCfg(droid_best_MM)+' ('+(highest_droid + BonusValue(droid_best_MM, bonus))+')');",
              "                param = param + BonusValue(droid_best_MM, bonus);",
              "            }",
              "            else SFT('Droid: '+highest_droid_name+' ('+highest_droid+')');",
              "        }",
              "    }",
              "    param = param + highest_droid;",
              "    //Захват",
              "    if(!acr_check && highest_hook == highest_value)",
              "    {",
              "        tint = 0;",
              "        if(def_best_MM > -1)tint = BonusValue(def_best_MM, bonus);",
              "",
              "        if(findsubstr(highest_hook_name, ' + Acrynator') > -1)",
              "        {",
              "            if(highest_hook > (highest_hook / 3 + tint))",
              "            {",
              "                SFT('Hook: '+highest_hook_name+' ('+highest_hook+')');",
              "                acr_check = 1;",
              "            }",
              "            //Если значение акрина с ММ выше, чем значение акрина с Акринатором",
              "            else",
              "            {",
              "                highest_hook_name = substr(highest_hook_name, 0, findsubstr(highest_hook_name, ' + Acrynator'));",
              "                highest_hook = highest_hook / 3;",
              "",
              "                if(hook_best_MM > -1 && cur_search_type == 'Hook')",
              "                {",
              "                    SFT('Hook: '+highest_hook_name+' + '+BonusNumInCfg(hook_best_MM)+' ('+(highest_hook + tint)+')');",
              "                    param = param + tint;",
              "                }",
              "                else SFT('Hook: '+highest_hook_name+' ('+highest_hook+')');",
              "            }",
              "        }",
              "        else",
              "        {",
              "            if(hook_best_MM > -1 && cur_search_type == 'Hook')",
              "            {",
              "                SFT('Hook: '+highest_hook_name+' + '+BonusNumInCfg(hook_best_MM)+' ('+(highest_hook + tint)+')');",
              "                param = param + tint;",
              "            }",
              "            else SFT('Hook: '+highest_hook_name+' ('+highest_hook+')');",
              "        }",
              "    }",
              "    else",
              "    {",
              "        if(findsubstr(highest_hook_name, ' + Acrynator') > -1)",
              "        {",
              "            highest_hook_name = substr(highest_hook_name, 0, findsubstr(highest_hook_name, ' + Acrynator'));",
              "            highest_hook = highest_hook / 3;",
              "",
              "            if(hook_best_MM > -1 && cur_search_type == 'Hook')",
              "            {",
              "                SFT('Hook: '+highest_hook_name+' + '+BonusNumInCfg(hook_best_MM)+' ('+(highest_hook + BonusValue(hook_best_MM, bonus))+')');",
              "                param = param + BonusValue(hook_best_MM, bonus);",
              "            }",
              "            else SFT('Hook: '+highest_hook_name+' ('+highest_hook+')');",
              "        }",
              "        else",
              "        {",
              "            if(hook_best_MM > -1 && cur_search_type == 'Hook')",
              "            {",
              "                SFT('Hook: '+highest_hook_name+' + '+BonusNumInCfg(hook_best_MM)+' ('+(highest_hook + BonusValue(hook_best_MM, bonus))+')');",
              "                param = param + BonusValue(hook_best_MM, bonus);",
              "            }",
              "            else SFT('Hook: '+highest_hook_name+' ('+highest_hook+')');",
              "        }",
              "    }",
              "    param = param + highest_hook;",
              "    //ГЗП",
              "    if(!acr_check && highest_def == highest_value)",
              "    {",
              "        tint = 0;",
              "        if(def_best_MM > -1)tint = BonusValue(def_best_MM, bonus);",
              "",
              "        if(findsubstr(highest_def_name, ' + Acrynator') > -1)",
              "        {",
              "            if(highest_def > (highest_def / 3 + tint))",
              "            {",
              "                SFT('DefGenerator: '+highest_def_name+' ('+highest_def+')');",
              "                acr_check = 1;",
              "            }",
              "            //Если значение акрина с ММ выше, чем значение акрина с Акринатором",
              "            else",
              "            {",
              "                highest_def_name = substr(highest_def_name, 0, findsubstr(highest_def_name, ' + Acrynator'));",
              "                highest_def = highest_def / 3;",
              "",
              "                if(def_best_MM > -1 && cur_search_type == 'DefGenerator')",
              "                {",
              "                    SFT('DefGenerator: '+highest_def_name+' + '+BonusNumInCfg(def_best_MM)+' ('+(highest_def + tint)+')');",
              "                    param = param + tint;",
              "                }",
              "                else SFT('DefGenerator: '+highest_def_name+' ('+highest_def+')');",
              "            }",
              "        }",
              "        else",
              "        {",
              "            if(def_best_MM > -1 && cur_search_type == 'DefGenerator')",
              "            {",
              "                SFT('DefGenerator: '+highest_def_name+' + '+BonusNumInCfg(def_best_MM)+' ('+(highest_def + tint)+')');",
              "                param = param + tint;",
              "            }",
              "            else SFT('DefGenerator: '+highest_def_name+' ('+highest_def+')');",
              "        }",
              "    }",
              "    else",
              "    {",
              "        if(findsubstr(highest_def_name, ' + Acrynator') > -1)",
              "        {",
              "            highest_def_name = substr(highest_def_name, 0, findsubstr(highest_def_name, ' + Acrynator'));",
              "            highest_def = highest_def / 3;",
              "",
              "            if(def_best_MM > -1 && cur_search_type == 'DefGenerator')",
              "            {",
              "                SFT('DefGenerator: '+highest_def_name+' + '+BonusNumInCfg(def_best_MM)+' ('+(highest_def + BonusValue(def_best_MM, bonus))+')');",
              "                param = param + BonusValue(def_best_MM, bonus);",
              "            }",
              "            else SFT('DefGenerator: '+highest_def_name+' ('+highest_def+')');",
              "        }",
              "        else",
              "        {",
              "            if(def_best_MM > -1 && cur_search_type == 'DefGenerator')",
              "            {",
              "                SFT('DefGenerator: '+highest_def_name+' + '+BonusNumInCfg(def_best_MM)+' ('+(highest_def + BonusValue(def_best_MM, bonus))+')');",
              "                param = param + BonusValue(def_best_MM, bonus);",
              "            }",
              "            else SFT('DefGenerator: '+highest_def_name+' ('+highest_def+')');",
              "        }",
              "    }",
              "    param = param + highest_def;",
              "",
              "    SFT(' ');",
              "",
              "    //Применяем бонусы от артефактов",
              "    int art_dam_bon = 0;",
              "    if(InstallArtefacts)",
              "    {",
              "        if(param_type == 'Hull armor')",
              "        {",
              "            tint = 0 + CT('Artefacts.NumericValues.kArtefactHull') + CT('Artefacts.NumericValues.kArtefactHullEx');",
              "            SFT('Iron Zoopie max bonus: ' + tint);",
              "            param = param + tint;",
              "        }",
              "        else if(param_type == 'Hull mass')",
              "        {",
              "            tint = 0 + CT('Artefacts.NumericValues.kArtefactAntigrav') + CT('Artefacts.NumericValues.kArtefactAntigravEx');",
              "            SFT('Antigravitazer max bonus: -' + tint + '%');",
              "            param = param + tint;",
              "        }",
              "        else if(param_type == 'Max damage')",
              "        {",
              "            if(dam_type == 'WEnergy')",
              "            {",
              "                tint = round(100.0 * CT('Artefacts.NumericValues.kArtDefToEnergyUp') + CT('Artefacts.NumericValues.kArtDefToEnergyUpEx'));",
              "                SFT('Proportionar max bonus: ' + (tint - 100) + '% (applied AFTER passing through a target\\\\\\'s shield)');",
              "                art_dam_bon = tint - 100;",
              "            }",
              "            else if(dam_type == 'WSplinter')",
              "            {",
              "                tint = round(100.0 * CT('Artefacts.NumericValues.kArtefactSpeed') + CT('Artefacts.NumericValues.kArtefactSpeedEx'));",
              "                SFT('Screw-on max bonus: ' + (tint - 100) + '% (applied AFTER passing through a target\\\\\\'s shield)');",
              "                art_dam_bon = tint - 100;",
              "            }",
              "        }",
              "        else if(param_type == 'Max damage per turn')",
              "        {",
              "            if(dam_type == 'WMissile')",
              "            {",
              "                SFT('Rals max bonus: ~30% (in total)');",
              "                param = (param * 30)/100;",
              "            }",
              "        }",
              "        else if(param_type == 'Engine speed')",
              "        {",
              "            //Сопланатор (применяет свой бонус до пси-ускорителя)",
              "            tint = 0 + CT('Artefacts.NumericValues.kArtWeaponToSpeed') + CT('Artefacts.NumericValues.kArtWeaponToSpeedEx');",
              "            SFT('Nozzlenator max bonus: ' + tint);",
              "            param = param + tint;",
              "",
              "            //Пси-ускоритель",
              "            tint = round(100.0 * CT('Artefacts.NumericValues.kArtefactSpeed') + CT('Artefacts.NumericValues.kArtefactSpeedEx'));",
              "            SFT('Matter Psi-Accelerator max bonus: ' + (tint - 100) + '%');",
              "            param = (param * tint)/100;",
              "        }",
              "        else if(param_type == 'Radar range')",
              "        {",
              "            tint = 0 + CT('Artefacts.NumericValues.kArtefactRadar') + CT('Artefacts.NumericValues.kArtefactRadarEx');",
              "            SFT('Prolonger max bonus: ' + tint);",
              "            param = param + tint;",
              "        }",
              "        else if(param_type == 'Scanner power')",
              "        {",
              "            tint = 0 + CT('Artefacts.NumericValues.kArtefactScaner') + CT('Artefacts.NumericValues.kArtefactScanerEx');",
              "            SFT('Scanner Cache max bonus: ' + tint);",
              "            param = param + tint;",
              "        }",
              "        else if(param_type == 'Droid efficiency')",
              "        {",
              "            tint = 0 + CT('Artefacts.NumericValues.kArtefactDroid') + CT('Artefacts.NumericValues.kArtefactDroidEx');",
              "            SFT('Junior Droid max bonus: ' + tint);",
              "            param = param + tint;",
              "        }",
              "        else if(param_type == 'Hook max object size')",
              "        {",
              "            tint = 0 + CT('Artefacts.NumericValues.kArtefactHook') + CT('Artefacts.NumericValues.kArtefactHookEx');",
              "            SFT('Erimeter max bonus: ' + tint);",
              "            param = param + tint;",
              "        }",
              "        else if(param_type == 'Hook range')",
              "        {",
              "            tint = 0 + CT('Artefacts.NumericValues.kArtefactHookRaduis') + CT('Artefacts.NumericValues.kArtefactHookRaduisEx');",
              "            SFT('Erimeter max bonus: ' + tint);",
              "            param = param + tint;",
              "        }",
              "        else if(param_type == 'Hook close (max) speed' || param_type == 'Hook far (min) speed')",
              "        {",
              "            tint = 0 + CT('Artefacts.NumericValues.kArtefactHookSpeed') + CT('Artefacts.NumericValues.kArtefactHookSpeedEx');",
              "            SFT('Erimeter max bonus: ' + tint);",
              "            param = param + tint;",
              "        }",
              "    }",
              "",
              "    //Применяем бонусы от стимуляторов и болезней",
              "    if(InstallStimulants)",
              "    {",
              "        // if(param_type == 'Hull mass')",
              "        // {",
              "            // SFT('Grand Malosausus debuff: +20%');",
              "            // param = param + 20;",
              "        // }",
              "        if(param_type == 'Engine speed')",
              "        {",
              "            //Гаалистра времени",
              "            SFT('Gaalian Alacrity bonus: +30%');",
              "            param = round(1.3 * param);",
              "        }",
              "        else if(param_type == 'Radar range')",
              "        {",
              "            //Психотропный кэш",
              "            SFT('Psychotropic Cache bonus: +100%');",
              "            param = param * 2;",
              "        }",
              "        else if(param_type == 'Scanner power')",
              "        {",
              "            //Психотропный кэш",
              "            SFT('Psychotropic Cache bonus: +12');",
              "            param = param + 12;",
              "        }",
              "    }",
              "",
              "    if(!art_dam_bon) SFT('Total parameter value: ' + param);",
              "    else SFT('Total parameter value: ' + param + ' ' + art_dam_bon + '% (after passing through a target\\\\\\'s shield)');",
              "",
              "    SFT(' ');",
              "    SFT('###########################');",
              "    SFT('###########################');",
              "    SFT('###########################');",
              "}",
              "",
              "unknown MM_PointsStatsArr = newarray(1);",
              "ArrayDelete(MM_PointsStatsArr, 0);",
              "ArrayAdd(MM_PointsStatsArr, 3000, 'UniqueMM_Points');",
              "ArrayAdd(MM_PointsStatsArr, 2.2, 'Level1_Coef');",
              "ArrayAdd(MM_PointsStatsArr, 1.6, 'Level2_Coef');",
              "ArrayAdd(MM_PointsStatsArr, 1.0, 'Level3_Coef');",
              "",
              "//Сперва суммируем все эти модификаторы, а затем вычитаем обнаруженные, по мере разбора строки Owner в бонусе",
              "ArrayAdd(MM_PointsStatsArr, 0.0350, 'Maloc');",
              "ArrayAdd(MM_PointsStatsArr, 0.0450, 'Peleng');",
              "ArrayAdd(MM_PointsStatsArr, 0.0500, 'People');",
              "ArrayAdd(MM_PointsStatsArr, 0.0575, 'Fei');",
              "ArrayAdd(MM_PointsStatsArr, 0.0650, 'Gaal');",
              "ArrayAdd(MM_PointsStatsArr, 0.0400, 'PirateClan');",
              "//По умолчанию присутствуют в любом списке, где заведомо не отключены через NonKling, либо не ограничены через перечисление серий",
              "ArrayAdd(MM_PointsStatsArr, 0.0500, 'Blazer');",
              "ArrayAdd(MM_PointsStatsArr, 0.0500, 'Keller');",
              "ArrayAdd(MM_PointsStatsArr, 0.0500, 'Terron');",
              "//По умолчанию неизвестной расы ни в одном списке овнеров нет",
              "ArrayAdd(MM_PointsStatsArr, 0.4500, 'None');",
              "//Враждебные кастомные расы считаем относительно значений серий доминаторов (в данном случае силу клисан считаем равной сразу двум сериям)",
              "ArrayAdd(MM_PointsStatsArr, 0.1000, 'Klissan');",
              "",
              "function FindUnbalancedMMs()",
              "{",
              "    SFT('###########################');",
              "    SFT('###########################');",
              "    SFT('###########################');",
              "    SFT(' ');",
              "",
              "    for(int i = 0; i < BonusCount(); i = i + 1)",
              "    {",
              "        str bonus_section = BonusNumInCfg(i);",
              "",
              "        //Отсеиваем акрины и запоминаем уникальные ММ",
              "        int uniqueMM = 0;",
              "        if(int(CT('MicroModuls.' + bonus_section + '.Special')) == 1)",
              "        {",
              "            uniqueMM = CT('MicroModuls.' + bonus_section + '.uniqueMM');",
              "            if(!uniqueMM) continue;",
              "        }",
              "",
              "        if(uniqueMM == 1) int total_points = MM_PointsStatsArr['UniqueMM_Points'];",
              "        else",
              "        {",
              "            if(BonusPriority(i) <= 30) float level_coef = MM_PointsStatsArr['Level1_Coef'];",
              "            else if(BonusPriority(i) <= 69) level_coef = MM_PointsStatsArr['Level2_Coef'];",
              "            else level_coef = MM_PointsStatsArr['Level3_Coef'];",
              "            total_points = (100 - BonusPriority(i)) * 5 * level_coef + 400;",
              "        }",
              "",
              "        float add_coef = 1.0;",
              "        str owners_str = CT('MicroModuls.' + bonus_section + '.Owner');",
              "        if(owners_str != '' && owners_str != 'Any')",
              "        {",
              "            int cnt = ParsCountFromString(owners_str, ',');",
              "            for(int j = 0; j < cnt; j = j + 1)",
              "            {",
              "                str owner_par = GetParFromString(owners_str, ',', j, 1);",
              "                if(owner_par == 'None') add_coef = add_coef - 0.45;",
              "            }",
              "        }",
              "",
              "        total_points = round(add_coef * total_points);",
              "",
              "    }",
              "",
              "    SFT(' ');",
              "    SFT('###########################');",
              "    SFT('###########################');",
              "    SFT('###########################');",
              "}"          
          ]        
        }      
      ],
      "Planets":      
      [
        {
          "Type":  "TPlanet",
          "Name":  "PlanetNew",
          "Pos.x":  -100,
          "Pos.y":  -30,
          "Parent":  -1,
          "#":  1,
          "Race":  62,
          "Owner":  62,
          "Economy":  14,
          "Goverment":  62,
          "RangeMin":  0,
          "RangeMax":  100,
          "Dialog":  -1        
        }      
      ],
      "Ships":      
      [
        {
          "Type":  "TStarShip",
          "Name":  "",
          "Pos.x":  -100,
          "Pos.y":  -90,
          "Parent":  -1,
          "#":  2,
          "Count":  1,
          "Owner":  62,
          "Ship.Type":  126,
          "Player":  true,
          "SpeedMin":  0,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        }      
      ],
      "Stars":      
      [
        {
          "Type":  "TStar",
          "Name":  "StarNew",
          "Pos.x":  -100,
          "Pos.y":  -60,
          "Parent":  -1,
          "#":  0,
          "Constellation":  0,
          "Priority":  0,
          "NoKling":  false,
          "NoComeKling":  false        
        }      
      ],
      "States":      
      [
        {
          "Type":  "TState",
          "Name":  "StateNew",
          "Pos.x":  -100,
          "Pos.y":  30,
          "Parent":  -1,
          "#":  3,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        }      
      ]    
    }  
  ],
  "Visual.Links":  
  [
    {
      "Type":  "TGraphLink",
      "Begin":  2,
      "End":  0,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1,
      "End":  0,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  4,
      "End":  1,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  4,
      "End":  3,
      "Nom":  0,
      "Arrow":  true    
    }  
  ],
  "BlockPar.EC.Total.Strings":  0,
  "BlockPar.EC":  
  [
  
  ]
}